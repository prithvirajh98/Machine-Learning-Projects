2. FLIGHT FARE PREDICTION

	◊ Overview of the Project:
		○ This is a Flask Web Application that estimates the price of the flight ticket.

	◊ Motivation:
		○ This system is developed primarily in order to predict the sales prices for flights tickets based upon a comparison if the release price of current day's flight with any other day in the past; as a consequence, customers can then use this system in order to book their ticket based on the level of comfort and affordability. In this way, the customer can easily choose the cheaper option available to them, based on the availability.
	◊ Dataset:
		○ Link: https://www.kaggle.com/datasets/nikhilmittal/flight-fare-prediction-mh
		○ For this particular project the dataset has been divided into 2 separate files (Data_Train and Test_set).
		○ The Data Pre-processing is performed separately for Training and Testing dataset. This is done to avoid data leakage.
		○ If the training and testing datasets were to be combined, during the model creation there would be a chance that the model would be knowing some of the information about the test dataset which might further lead to overfitting.
		○ The dataset has 10682 records and 11 Features - after dropping the null values.
	◊ Exploratory Data Analysis:
		1. Date_of_Journey:
			◊ In this dataset, the Date_of_Journey feature contains the object data type (String) instead of containing date time type of object.
			◊ In order to make the model understand it is important to convert the column to datetime using pandas function called to_datetime(). 
			◊ Using the to_datetime() function, Day and Month of the journey can be extracted.
			◊ Once the required information is extracted "Date_of_Journey" can be dropped, since it will be of no use in the further analysis.
		2. Dep_Time:
			◊ Departure Time: It is the time when an aircraft leaves the gate.
			◊ Similar to the Date_of_Journey feature, the departure hour and minutes can be extracted from the Dep_Time feature. 
			◊ This is because to make the model understand the will be developed further.
			◊ Once the departure hour and minutes are extracted from the "Dep_Time" feature, it can dropped as it will not be used the further analysis process.
		3. Arrival_Time:
			◊ Arrival Time: It is the time when an aircraft pull up to the gate.
			◊ Similar to the Dep_Time, at what hour and minute the aircraft arrive at the gate can be extracted from the Arrival_Time feature. 
			◊ Once the required information is extracted "Arrival_Time" can be dropped, since it will be of no use in the further analysis.
		4. Duration:
			◊ It is the time taken by an aircraft to travel from source to its destination.
			◊ It is difference between Departure Time and Arrival Time.
			◊ Convert the Duration feature into a list and extract Number of Hours and Number of Minutes. 
			◊ Once extracted append those 2 list to the data frame and drop the Duration feature.
	◊ Handling Categorical Values:
		○ Categorical Data is a type of data where is used to group information based on the characteristics.
		○ Categorical Variables are divided into 2 categories:
			1. Nominal Data: 
				□ It is also known as the Named Data, where the data has no order to it.
				□ One Hot Encoding can be used in order to handle the Nominal Data.
				□ The pandas library provides an in built function called get_dummies() where the Nominal data can be converted into Numerical values.
			2. Ordinal Data:
				□ It is type of the data where the data has order to it. 
				□ Label Encoder can be used in order to handle the Ordinal Data.
		○ The categorical features are as follows:
			§ Airline
			§ Source
			§ Destination
			§ Route
			§ Total_Stops
	◊ Once the Exploratory Data Analysis, Data pre-processing and Handling the categorical values, create a final training dataset by concatenating all the data frames.

Note: Since the Training and Testing data were divided into 2 separate files, the same process has to repeated for the Testing set.

	◊ Feature Selection:
		○ It is the process of automatically or manually selecting the subset of most appropriate and relevant features that'll be used to build the model.
		○ Feature Selection is primarily focused on removing non - informative or redundant predictors from the model. 
		○ Some of the feature selection models are as follows:
			§ Heatmap
			§ feature_importances_
			§ SelectKBest
		1. Correlation between Independent and Dependent Features:

		○ If the 2 independent features are highly correlated then either one of the features can be dropped since both the features will be doing the same task.
		○ Duration_Hours and Total Stops, Duration_Hours and Price, Total_Stops and Price are highly correlated are highly correlated.
	2. Extracting Important Features using ExtraTreesRegressor:
	
			§ ExtraTreesRegressor helps to find the feature importance. It helps to find out which feature is highly correlated with the dependent feature.
			§ The ExtraTreesRegressor algorithm is like random forest algorithm, creates many decision trees, but the sampling for each tree is random, without replacement.
			§ This creates a dataset for each tree with unique samples. A specific number of features, from the total set of features are also selected randomly for each tree.
			§ From the above figure, Total_Stops is the most important feature and followed by Day_of_Journey.
		
	◊ Building the Predictive Model:
		1. Fitting the Model using the Random Forest
			§ Import train_test_split
			§ Split the data into train and test set in order to predict with respect to X_test.
			§ Import the Random Forest Model.
			§ Fit the data into the model.
			§ In Regression check RSME Score.
			§ Visualise the result.
			§ Do the scaling if required => Scaling is not done in Random Forest.
		2. The Gaussian Distribution.
			§ The Rsquared Score: 
				□ The R² score ranges from -∞ to 1, where:
					1 indicates a perfect fit, meaning that all movements of the dependent variable (your target variable) are completely explained by the independent variables (your features or predictors).
					0 means that the model does not explain any of the variation in the dependent variable around its mean.
				□ A negative value suggests that the model is worse than just predicting the mean of the dependent variable.
				□ The metrics module, likely referring to scikit-learn, a machine learning library for Python. This function computes the R² score, which is a statistic that measures the proportion of the variance in the dependent variable that is predictable from the independent variables. In simpler terms, it's a measure of how well the observed outcomes are replicated by the model, based on the proportion of total variation of outcomes explained by the model.
				□ An R-Squared value shows how well the model predicts the outcome of the dependent variable.
		
		3. Hyper Parameter Tunning:
			§ It is an essential part of any Machine Learning project and one of the most time consuming.
			§ It allows Data Scientist to tweak the model performance for optimal results.
			§ This process is an essential part of the Machine Learning, and choosing appropriate hyperparameters values is crucial for success.
			§ The only way to determine these is through multiple experiments, where you pick a set of hyperparameters and run them through your model. This is called hyperparameter tuning.
				1. RandomizedSearchCV --> Fast
				2. GridSearchCV
	
	◊ Conclusion:
		○ With the help of machine learning algorithms applied on the dataset, the system will be able to predict the dynamic fare of the flight, which can be used to obtain the cheapest flight ticket possible. By calculating the R-Squared values from the algorithm, we are able to determine the accuracy of the model.
